package com.marcelo.inter.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.marcelo.inter.model.Job;
import com.marcelo.inter.repository.JobRepository;
import com.marcelo.inter.util.Util;

@RestController
@RequestMapping(path = "/job")
public class JobController {

	@Autowired
	private JobRepository jobRepo;
	
	Map<String, String> response = new HashMap<>();

	@GetMapping()
	public ResponseEntity<?> getList() {
		List<Job> jobList = jobRepo.findAll();
   
		if (jobList != null) {
			return new ResponseEntity<>(jobList, HttpStatus.OK);
		}else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	  
	@GetMapping(value = "/{id}")
	public ResponseEntity<?> getById(@PathVariable("id") Integer id) {
		Optional<Job> job = jobRepo.findById(id);
   
		if (job.isPresent()) {
			return new ResponseEntity<>(job, HttpStatus.OK);
		}else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
  
	@DeleteMapping(value = "/{id}")
	public ResponseEntity<?> deleteById(@PathVariable("id") Integer id) {
		if(jobRepo.existsById(id)) {
			jobRepo.deleteById(id);
			return new ResponseEntity<>(HttpStatus.OK);
		}else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	
	@PostMapping()
	public ResponseEntity<?> create(@RequestBody Job jobPayload) {
		if(jobPayload.getId() == null) {
			return new ResponseEntity<>("ERROR: id is required", HttpStatus.PRECONDITION_REQUIRED);
		}
		if(Util.IsNullOrEmpty(jobPayload.getName())) {
			return new ResponseEntity<>("ERROR: name is required", HttpStatus.PRECONDITION_REQUIRED);
		}
		if(jobRepo.getByName(jobPayload.getName()) != null) {
			return new ResponseEntity<>("ERROR: job's name already exists", HttpStatus.FORBIDDEN);
		}
//		if(jobPayload.getParentJob() != null) {
//			Optional<Job> parent = jobRepo.findById(jobPayload.getParentJob().getId());
//			if(!jobPayload.validateParents(jobPayload.getId(), jobPayload.getName(), parent)) {
//				return new ResponseEntity<>("ERROR: name is required", HttpStatus.PRECONDITION_REQUIRED);
//			}
//		}
		
		jobRepo.save(jobPayload);
		
		return new ResponseEntity<>(jobRepo.findById(jobPayload.getId()), HttpStatus.CREATED);
	}
	
	@PutMapping(value = "/{id}")
	public ResponseEntity<?> updateById(@PathVariable("id") Integer id, @RequestBody Job jobPayload) {
		if(jobRepo.existsById(id)) {
			jobRepo.deleteById(id);
			return new ResponseEntity<>(HttpStatus.OK);
		}else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
}
