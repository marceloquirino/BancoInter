package com.marcelo.inter.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.marcelo.inter.model.Task;
import com.marcelo.inter.repository.TaskRepository;
import com.marcelo.inter.util.Util;

@RestController
@RequestMapping(path = "/task")
public class TaskController {

	@Autowired
	private TaskRepository taskRepo;
	
	Map<String, String> response = new HashMap<>();

	@GetMapping()
	public ResponseEntity<?> getList() {
		List<Task> taskList = taskRepo.findAll();
   
		if (taskList != null) {
			return new ResponseEntity<>(taskList, HttpStatus.OK);
		}else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	  
	@GetMapping(value = "/{id}")
	public ResponseEntity<?> getById(@PathVariable("id") Integer id) {
		Optional<Task> task = taskRepo.findById(id);
		if (task.isPresent()) {
			return new ResponseEntity<>(task, HttpStatus.OK);
		}else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
  
	@DeleteMapping(value = "/{id}")
	public ResponseEntity<?> deleteById(@PathVariable("id") Integer id) {
		if(taskRepo.existsById(id)) {
			taskRepo.deleteById(id);
			return new ResponseEntity<>(HttpStatus.OK);
		}else {
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
	
	@PostMapping()
	public ResponseEntity<?> create(@RequestBody Task taskPayload) {
		if(taskPayload.getId() == null) {
			return new ResponseEntity<>("ERROR: id is required", HttpStatus.PRECONDITION_REQUIRED);
		}
		if(Util.IsNullOrEmpty(taskPayload.getName())) {
			return new ResponseEntity<>("ERROR: name is required", HttpStatus.PRECONDITION_REQUIRED);
		}
		if(taskPayload.getWeight() == null) {
			return new ResponseEntity<>("ERROR: weight is required", HttpStatus.PRECONDITION_REQUIRED);
		}
		
		taskRepo.save(taskPayload);
		
		return new ResponseEntity<>(taskRepo.findById(taskPayload.getId()), HttpStatus.CREATED);
	}
	
//	@PutMapping(value = "/{id}")
//	public ResponseEntity<?> updateById(@PathVariable("id") Integer id, @RequestBody Task taskPayload) {
//		Optional<Task> taskOpt = taskRepo.findById(id);
//		taskOpt.ifPresent(task -> {
//			task.setName(taskPayload.getName());
//			task.setCompleted(taskPayload.isCompleted());
//			task.setWeight(taskPayload.getWeight());
//			task.setCreatedAt(taskPayload.getCreatedAt());
//		}
//				);
//			return new ResponseEntity<>(HttpStatus.OK);
//		}else {
//			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
//		}
//	}
}
