package com.marcelo.inter.util;

import java.math.BigInteger;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;

public class RSACryptography {
	public static String encrypt(String text, String pKey) throws NoSuchAlgorithmException, InvalidKeyException, NoSuchPaddingException, IllegalBlockSizeException, BadPaddingException {
		
		KeyPairGenerator kpg = KeyPairGenerator.getInstance("RSA");
		
		kpg.initialize(2048);
		KeyPair kp = kpg.generateKeyPair();
		
		Key pub = kp.getPublic();
		Key pvt = kp.getPrivate();


	    Cipher encryptCipher = Cipher.getInstance("RSA");
	    encryptCipher.init(Cipher.ENCRYPT_MODE, pub);

	    byte[] cipherText = encryptCipher.doFinal(text.getBytes());

	    return Base64.getEncoder().encodeToString(cipherText);
		
	}
}
